{"version":3,"sources":["util/api/ApiResponse.ts","config.ts","util/api/Api.ts","util/models/Setting.ts","util/api/responses/PreflightResponse.ts","util/models/Markdown.ts","util/models/Page.ts","util/api/responses/GetPageResponse.ts","util/api/responses/GetConfigResponse.ts","util/api/RequestFactory.ts","actions/ActionType.ts","selectors/selectors.ts","components/settings/SettingsApplyer.tsx","util/errors/ErrorType.ts","components/page/MarkDownToJsx.tsx","components/placeholder/loading/LoadingSpinner.tsx","components/error/Error.tsx","components/page/MarkdownPage.tsx","App.tsx","util/models/State.ts","reducers/reducer.ts","index.tsx"],"names":["ApiResponse","data","status","success","message","this","input","parseInt","Api","path","license","Promise","resolve","reject","a","url","URL","baseUrl","searchParams","delete","append","fetch","href","res","json","deserialize","body","method","JSON","stringify","obj","get","RequestFactory","post","config","Setting","key","value","defaultValue","cssProperty","PreflightResponse","settings","user","map","s","Markdown","content","htmlContent","description","Page","slug","title","markdown","GetPageResponse","page","GetConfigResponse","baseApiUrl","makeGetRequest","ActionType","settingsSelector","state","errorSelector","error","SettingsApplyer","css","filter","join","document","find","ErrorType","MarkDownToJsx","md","rootRef","useRef","className","ref","options","LoadingSpinner","color","loading","delayMs","useState","isLoading","setIsLoading","useEffect","setTimeout","data-active","size","errorTypeByHttpStatusCode","statusCode","NOT_FOUND","SERVER_ERROR","Error","component","errorType","INVALID_LICENSE","MarkdownPage","setLoading","setPage","setError","useSelector","getPage","then","App","dispatch","useDispatch","getConfig","type","SET_ERROR","preflight","SET_SETTINGS","handlePreflightResponse","catch","console","log","State","rootReducer","action","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.08d261ea.chunk.js","sourcesContent":["import Serializable from \"../interfaces/Serializable\";\n\nclass ApiResponse<T> implements Serializable {\n\n    public status = 200;\n    public success = false;\n    public data: T;\n    public message = '';\n\n    constructor(data: T) {\n        // @ts-ignore\n        this.data = data;\n    }\n\n    deserialize(input: {}): ApiResponse<T> {\n\n        // @ts-ignore\n        this.status = parseInt(input['status']);\n\n        // @ts-ignore\n        this.success = !!input['success'];\n\n        // @ts-ignore\n        input['message'] && (this.message = `${input['message']}`);\n\n        return this;\n    }\n\n}\n\nexport default ApiResponse;\n","export default {\n    PRODUCTION: true,\n    LICENSE: '123',\n    BASE_PROD_API_URL: 'http://jaspress.lichte.info/api',\n    BASE_DEV_API_URL: 'http://localhost:8073/Projects/PHP-CMS/api',\n};\n","import ApiResponse from \"./ApiResponse\";\nimport RequestFactory from \"./RequestFactory\";\nimport config from \"../../config\";\n\nclass Api {\n\n    public static baseUrl = (config.PRODUCTION ? config.BASE_PROD_API_URL : config.BASE_DEV_API_URL);\n\n    private static get(path: string, license: string): Promise<ApiResponse<any>> {\n        return new Promise(async (resolve, reject) => {\n            const url = new URL(`${Api.baseUrl}${path}`);\n            url.searchParams.delete('license');\n            url.searchParams.append('license', license);\n\n            const res = await fetch(url.href);\n            const json = await res.json();\n            resolve((new ApiResponse(json)).deserialize(json));\n        });\n    }\n\n    private static post(path: string, license: string) {\n        return (body: {}) => {\n            return new Promise(async (resolve, reject) => {\n                const json = (await fetch(\n                    `${Api.baseUrl}${path}`,\n                    {\n                        method: 'POST',\n                        body: JSON.stringify({...body, license}),\n                    }\n                )).json();\n                resolve((new ApiResponse(json)).deserialize(json));\n            });\n        }\n    }\n\n    public static async makeGetRequest<T>(obj: T, url: string): Promise<ApiResponse<T>> {\n        const res = await Api.get(url, RequestFactory.license);\n        // @ts-ignore\n        return (new ApiResponse(obj.deserialize(res.data.data))).deserialize(res);\n    }\n\n    public static async makePostRequest<T>(obj: T, url: string, body: {}): Promise<ApiResponse<T>> {\n        const res = await Api.post(url, RequestFactory.license)(body);\n        // @ts-ignore\n        return (new ApiResponse(obj.deserialize(res.data.data))).deserialize(res);\n    }\n\n}\n\nexport default Api;\n","import Serializable from \"../interfaces/Serializable\";\n\nexport default class Setting implements Serializable {\n\n    key: string = '';\n    value: string = '';\n    defaultValue: string = '';\n    cssProperty: string|null = null;\n\n    deserialize(input: {}): Setting {\n        // @ts-ignore\n        this.key = input['key'];\n        // @ts-ignore\n        this.value = input['value'];\n        // @ts-ignore\n        this.defaultValue = input['defaultValue'];\n        // @ts-ignore\n        input['cssProperty'] && (this.cssProperty = input['cssProperty']);\n\n        return this;\n    }\n\n}\n","import ResponseData from \"./ResponseData\";\nimport Setting from \"../../models/Setting\";\n\nclass PreflightResponse implements ResponseData{\n\n    public settings: Setting[] = [];\n    public user = null;\n\n    deserialize(input: {}): PreflightResponse {\n        if (!input) {\n            return this;\n        }\n\n        // @ts-ignore\n        input['settings'] && (this.settings = input['settings'].map(s => (new Setting()).deserialize(s)));\n        // @ts-ignore\n        input['user'] && (this.settings = input['user']);\n\n        return this;\n    }\n\n}\n\nexport default PreflightResponse;\n","import Serializable from \"../interfaces/Serializable\";\n\nexport default class Markdown implements Serializable {\n\n    content = '';\n    htmlContent = '';\n    description = '';\n\n    deserialize(input: {}): Markdown {\n        // @ts-ignore\n        input['content'] && (this.content = input['content']);\n        // @ts-ignore\n        input['htmlContent'] && (this.htmlContent = input['htmlContent']);\n        // @ts-ignore\n        input['description'] && (this.description = input['description']);\n\n        return this;\n    }\n\n}\n","import Serializable from \"../interfaces/Serializable\";\nimport Markdown from \"./Markdown\";\n\nexport default class Page implements Serializable {\n\n    slug: string = '';\n    title: string = '';\n    markdown: Markdown|null = null;\n    \n    deserialize(input: {}): Page {\n        // @ts-ignore\n        this.slug = input['slug'];\n        // @ts-ignore\n        this.title = input['title'];\n\n        // @ts-ignore\n        this.markdown = (new Markdown()).deserialize(input['markdown']);\n\n        return this;\n    }\n\n}\n","import ResponseData from \"./ResponseData\";\nimport Page from \"../../models/Page\";\n\nexport default class GetPageResponse implements ResponseData {\n\n    page: Page|null = null;\n\n    deserialize(input: {}): GetPageResponse {\n        if (!input) {\n            return this;\n        }\n\n        // @ts-ignore\n        input['page'] && (this.page = (new Page()).deserialize(input['page']));\n\n        return this;\n    }\n\n}\n","import ResponseData from \"./ResponseData\";\n\nclass GetConfigResponse implements ResponseData {\n\n    public baseApiUrl: string = '';\n\n    deserialize(input: {}): GetConfigResponse {\n        if (!input) {\n            return this;\n        }\n\n        // @ts-ignore\n        this.baseApiUrl = `${input['base_api_url']}`;\n\n        return this;\n    }\n\n}\n\nexport default GetConfigResponse;\n","import Api from \"./Api\";\nimport PreflightResponse from \"./responses/PreflightResponse\";\nimport GetPageResponse from \"./responses/GetPageResponse\";\nimport GetConfigResponse from \"./responses/GetConfigResponse\";\n\nexport default class RequestFactory {\n\n    public static license: string = '';\n\n    public static async getConfig() {\n        return Api.makeGetRequest<GetConfigResponse>(\n            new GetConfigResponse(),\n            `/config/get.php`\n        );\n    }\n\n    public static async preflight(license: string) {\n        RequestFactory.license = license;\n        return Api.makeGetRequest<PreflightResponse>(\n            new PreflightResponse(),\n            `/preflight.php`\n        );\n    }\n\n    public static async getPage(slug: string) {\n        return Api.makeGetRequest<GetPageResponse>(\n            new GetPageResponse(),\n            `/page/get.php?p=${slug}`\n        );\n    }\n\n}\n","enum ActionType {\n    SET_SETTINGS = 0,\n    SET_ERROR = 1,\n}\n\nexport default ActionType;\n","import State from \"../util/models/State\";\nimport Setting from \"../util/models/Setting\";\nimport ErrorType from \"../util/errors/ErrorType\";\n\ntype Selector<T> = (state: State) => T;\n\nexport const stateSelector: Selector<State> = state => state;\nexport const settingsSelector: Selector<Setting[]|null> = state => state.settings;\nexport const errorSelector: Selector<ErrorType|null> = state => state.error;\n","import React from \"react\";\nimport Setting from \"../../util/models/Setting\";\n\ninterface IProps {\n    settings: Setting[],\n}\n\nexport default function SettingsApplyer({settings}: IProps) {\n    const css = `html {${settings.filter(s => s.cssProperty != null).map(s => `${s.cssProperty}: ${s.value};`).join('')}`;\n\n    document.title = settings.find(s => s.key === 'APP_NAME')?.value || '';\n\n    return (\n        <style>{css}</style>\n    );\n}\n","enum ErrorType {\n    INVALID_LICENSE = 0,\n    SERVER_ERROR = 1,\n    NOT_FOUND = 2,\n}\n\nexport default ErrorType;\nexport function errorTypeByHttpStatusCode(statusCode: number): ErrorType|null {\n    switch (statusCode) {\n        case 200: return null;\n        case 404: return ErrorType.NOT_FOUND;\n        case 500: return ErrorType.SERVER_ERROR;\n    }\n    return ErrorType.SERVER_ERROR;\n}\n","import React, { useRef } from 'react'\nimport Markdown from 'markdown-to-jsx'\nimport './Markdown.scss';\n\ninterface Props {\n    md: string;\n}\n\nconst MarkDownToJsx = ({md, }: Props) => {\n    const rootRef = useRef() as React.MutableRefObject<HTMLDivElement>;\n\n    return (\n        <div className=\"markdown\" ref={rootRef}>\n            <Markdown\n                options={{}}\n            >{md}</Markdown>\n        </div>);\n}\n\nexport default MarkDownToJsx\n","import React, {useEffect, useState} from \"react\";\nimport Loader from \"react-spinners/PropagateLoader\";\nimport './LoadingSpinner.scss';\n\ninterface IProps {\n    color: string,\n    loading: boolean,\n    delayMs?: number,\n}\n\nexport default function LoadingSpinner({color, loading, delayMs}: IProps) {\n    const [ isLoading, setIsLoading ] = useState(loading);\n    useEffect(() => {\n        if (!loading) {\n            setTimeout(() => setIsLoading(false), delayMs || 0);\n        }\n    }, [loading, delayMs]);\n\n    return (<div className=\"loading loading-fs\" data-active={(isLoading ? 'yes' : 'no')}>\n        <Loader\n            color={color}\n            loading={true}\n            size={25}\n        />\n    </div>);\n}\n","import React from \"react\";\nimport ErrorType from \"../../util/errors/ErrorType\";\n\ninterface IProps {\n    errorType: ErrorType,\n}\n\nexport default function Error({errorType}: IProps) {\n    const component = ((errorType: ErrorType) => {\n        switch (errorType) {\n            case ErrorType.INVALID_LICENSE:\n                return (<p>Invalid License!</p>);\n            case ErrorType.SERVER_ERROR:\n                return (<p>Unexpected Server error</p>);\n            case ErrorType.NOT_FOUND:\n                return (<p>Not found</p>);\n        }\n        return <p>An error occurred</p>;\n    })(errorType);\n\n    return (<section>{component}</section>);\n}\n","import React, {useEffect, useState} from \"react\";\nimport Page from \"../../util/models/Page\";\nimport RequestFactory from \"../../util/api/RequestFactory\";\nimport MarkDownToJsx from \"./MarkDownToJsx\";\nimport LoadingSpinner from \"../placeholder/loading/LoadingSpinner\";\nimport {useSelector} from \"react-redux\";\nimport {settingsSelector} from \"../../selectors/selectors\";\nimport ErrorType, {errorTypeByHttpStatusCode} from \"../../util/errors/ErrorType\";\nimport Error from \"../error/Error\";\n\ninterface IProps {\n    slug: string\n}\n\nexport default function MarkdownPage({slug}: IProps) {\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState<Page|null>(null);\n    const [error, setError] = useState<ErrorType|null>(null);\n    const settings = useSelector(settingsSelector);\n\n    useEffect(() => {\n        RequestFactory.getPage(slug).then(res => {\n            setLoading(false);\n            if (res.status === 200) {\n                setPage(res.data.page);\n            } else {\n                setError(errorTypeByHttpStatusCode(res.status));\n            }\n        });\n    }, [slug]);\n\n    useEffect(() => {\n        if (page != null) {\n            document.title = page.title;\n        }\n    }, [page]);\n\n    return (\n    <section>\n        <LoadingSpinner\n            loading={loading}\n            color={settings?.find(s => s.key === 'ACCENT_COLOR')?.value || ''}\n            delayMs={500}\n        />\n        { page == null\n            ? (error == null ? '' : <Error errorType={error}/>)\n            : <MarkDownToJsx md={page?.markdown?.content || ''}/>\n        }\n    </section>);\n}\n","import React, {useEffect, useState} from 'react';\nimport RequestFactory from \"./util/api/RequestFactory\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport ActionType from \"./actions/ActionType\";\nimport {errorSelector, settingsSelector} from \"./selectors/selectors\";\nimport SettingsApplyer from \"./components/settings/SettingsApplyer\";\nimport MarkdownPage from \"./components/page/MarkdownPage\";\nimport ApiResponse from \"./util/api/ApiResponse\";\nimport PreflightResponse from \"./util/api/responses/PreflightResponse\";\nimport ErrorType, {errorTypeByHttpStatusCode} from \"./util/errors/ErrorType\";\nimport Error from \"./components/error/Error\";\nimport config from \"./config\";\nimport Api from \"./util/api/Api\";\n\nexport default function App() {\n  const dispatch = useDispatch();\n  const settings = useSelector(settingsSelector);\n  const error = useSelector(errorSelector);\n  const [ loading, setLoading ] = useState(true);\n\n  useEffect(() => {\n    RequestFactory.getConfig().then(res => {\n      if (res.status !== 200) {\n        dispatch({\n          type: ActionType.SET_ERROR,\n          error: errorTypeByHttpStatusCode(res.status)\n        });\n      } else {\n        Api.baseUrl = res.data.baseApiUrl;\n        RequestFactory.preflight(config.LICENSE).then(handlePreflightResponse(dispatch));\n      }\n    }).catch(console.log);\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (settings != null) {\n      setLoading(false);\n    }\n  }, [settings]);\n\n  if (error != null) {\n    return <Error errorType={error} />;\n  }\n\n  if (loading) {\n    return <></>;\n  }\n\n  return (<>\n    {settings != null && <SettingsApplyer settings={settings} />}\n    <MarkdownPage slug=\"start\"/>\n  </>);\n}\n\nfunction handlePreflightResponse(dispatch: Function) {\n  return (res: ApiResponse<PreflightResponse>) => {\n    if (res.status === 200) {\n      dispatch({\n        type: ActionType.SET_SETTINGS,\n        settings: res.data.settings\n      });\n    } else {\n      dispatch({\n        type: ActionType.SET_ERROR,\n        error: (res.status === 401 ? ErrorType.INVALID_LICENSE : errorTypeByHttpStatusCode(res.status))\n      });\n    }\n  }\n}\n","import Setting from \"./Setting\";\nimport ErrorType from \"../errors/ErrorType\";\n\nclass State {\n\n    settings: Setting[]|null = null;\n    error: ErrorType|null = null;\n\n}\n\nexport default State;\n","import State from '../util/models/State';\nimport ActionType from \"../actions/ActionType\";\nimport SetSettingsAction from \"../actions/settings/SetSettingsAction\";\nimport SetErrorAction from \"../actions/errors/SetErrorAction\";\n\nconst rootReducer = (\n    state: State = new State(),\n    action: SetSettingsAction | SetErrorAction\n): State => {\n    switch(action.type) {\n        case ActionType.SET_SETTINGS:\n            return {...state, settings: action.settings};\n        case ActionType.SET_ERROR:\n            return {...state, error: action.error};\n    }\n\n    return state;\n};\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport rootReducer from \"./reducers/reducer\";\nimport { createStore } from 'redux';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}